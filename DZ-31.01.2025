#include <iostream>
#include <vector>
using namespace std;

   vector<pair<int, int>> findSaddlePoints(const vector<vector<int>>& matrix) {
    if (matrix.empty() || matrix[0].empty()) return {};

    const size_t rows = matrix.size();
    const size_t cols = matrix[0].size();

    vector<int> rowMins(rows);

    for (size_t i = 0; i < rows; ++i) {
        rowMins[i] = *min_element(matrix[i].begin(), matrix[i].end());
    }

    vector<pair<int, int>> saddlePoints;

    for (size_t i = 0; i < rows; ++i) {
        for (size_t j = 0; j < cols; ++j) {
            if (matrix[i][j] == rowMins[i]) {
                bool isMaxInCol = true;

                for (size_t k = 0; k < rows; ++k) {
                    if (matrix[k][j] > matrix[i][j]) {
                        isMaxInCol = false;
                        break;
                    }
                }

                if (isMaxInCol) {
                    saddlePoints.emplace_back(i, j);
                }
            }
        }
    }

    return saddlePoints;
}

int main() {
    setlocale(LC_ALL, "russian");

    vector<vector<int>> matrix = {
        {9, 8, 7},
        {5, 6, 10},
        {11, 12, 13}
    };

    auto result = findSaddlePoints(matrix);

    cout << "Седловые точки:\n";
    for (const auto& point : result) {
        cout << "(" << point.first + 1 << ", " << point.second + 1 << ") -> "
            << matrix[point.first][point.second] << "\n";
    }

    return 0;
}
