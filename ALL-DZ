//Задание:

/*
#include <iostream> 
#include <ctime>
#include <iomanip>
using namespace std;

int main()
{
    setlocale(LC_ALL, "Russian");
    srand(time(0));
    int i, j;
    int n = 0; 
    const int size = 20; 
    int array[size];

    for (i = 0; i < size; i++) array[i] = rand() % 10; 

    cout << "Исходный массив " << endl;
    for (i = 0; i < size; i++)
        cout << array[i] << " ";
    cout << endl << endl;

    for (j = 0; j < size; j++)
    {
        for (i = 0; i < size; i++)
            if (array[j] == array[i])
                n++;
        cout << setw(3) << array[j] << "    " << setw(3) << n << " вхождения " << endl;
        n = 0;
    }

    return 0;
}
*/


//Задание:Пользователь вводит с клавиатуры число, необходимо
показать на экран сумму его цифр.
Примечание. Например, пользователь ввел число
12345. На экране должно появиться сообщение
о том, что сумма цифр числа 15.

/*
#include <iostream>
using namespace std;

int main() {
    setlocale(LC_ALL, "russian");
    long long number;
    cout << "Введите число: ";
    cin >> number;

    int sum = 0; 

    
    while (number != 0) {
        sum += number % 10; 
        number /= 10; 
    }

    
    cout << "Сумма цифр числа: " << sum << endl;

    return 0;
}
*/


//Задание:В первый день улитка проползла 15 см. Каждый следу
ющий день она проползала на 2 см дальше. Определить
какое общее расстояние проползет улитка через N дней.
Примечание. Например, пользователь ввел чис-
ло 4. Следовательно, улитка ползла 4 дня, поэтому
суммарный путь составит 72 см.

/*
#include <iostream>
using namespace std;

int main() {
    setlocale(LC_ALL, "russian");
    int N; 
    cout << "Введите количество дней (N): ";
    cin >> N;

    int initialDistance = 15;
    int increment = 2;

    int totalDistance = 0;

    for (int day = 0; day < N; day++) {
        totalDistance += (initialDistance + day * increment);
    }

    cout << "Общее расстояние, пройденное улиткой за " << N << " дней: " << totalDistance << " см." << endl;

    return 0;
}
*/


//Задание: На чемодане стоит трехзначный код. Он состоит из
цифр, которые не повторяются. Напишите программу,
которая выведет все возможные такие комбинации
цифр. А также определите сколько времени понадо-
бится для открытия чемодана в худшем случае, если
на один такой набор уходит 3 секунды.

/*
#include <iostream>
#include <vector>
#include <set>
#include <chrono>
using namespace std;

void generateCombinations(int number, set<int>& combinations) {
    int hundreds = number / 100;
    int tens = (number / 10) % 10;
    int units = number % 10;

    if (hundreds != tens && hundreds != units && tens != units) {
        combinations.insert(number);
    }
}

int main() {
    setlocale(LC_ALL, "russian");
    set<int> combinations; 

    for (int i = 100; i < 1000; i++) {
        generateCombinations(i, combinations);
    }

    cout << "Все возможные трехзначные коды с неповторяющимися цифрами:\n";
    for (int code : combinations) {
        cout << code << endl;
    }

    int totalCombinations = combinations.size();
    cout << "Всего комбинаций: " << totalCombinations << endl;

    int timePerCombinationInSeconds = 3;
    int totalTimeInSeconds = totalCombinations * timePerCombinationInSeconds;

    int hours = totalTimeInSeconds / 3600;
    int minutes = (totalTimeInSeconds % 3600) / 60;
    int seconds = totalTimeInSeconds % 60;

        cout << "Время, необходимое для открытия чемодана в худшем случае: "
        << hours << " час(ов), " << minutes << " минут(ы), " << seconds << " секунд(ы)." << endl;

    return 0;
}
*/


//Задание:Создать программу, которая выводит на экран простые
числа в диапазоне от 2 до 1000. (Число называется
простым, если оно делится только на 1 и на само себя
без остатка; причем число 1 простым не считается).

/*
#include <iostream>
using namespace std;

bool isPrime(int number) {
    if (number <= 1) {
        return false; 
    }
    for (int i = 2; i * i <= number; i++) { 
        if (number % i == 0) {
            return false; 
        }
    }
    return true; 
}

int main() {
    setlocale(LC_ALL, "russian");
    cout << "Простые числа в диапазоне от 2 до 1000:\n";

    for (int num = 2; num <= 1000; num++) {
        if (isPrime(num)) {
            cout << num << " "; 
        }
    }

    cout << endl;
    return 0;
}
*/


//Задание:Разработать программу, которая выводит на экран линию из символов. Число символов, какой
использовать символ, и какая будет линия — вертикаль-
ная, или горизонтальная — указывает пользователь.

/*
#include <iostream>
using namespace std;

int main() {
    setlocale(LC_ALL, "russian");
    int numSymbols;
    char symbol;
    char direction;

    cout << "Введите количество символов: ";
    cin >> numSymbols;

    cout << "Введите символ, который хотите использовать: ";
    cin >> symbol;

    cout << "Введите направление линии (h - горизонтальная, v - вертикальная): ";
    cin >> direction;

    if (direction == 'h') {
        for (int i = 0; i < numSymbols; i++) {
            cout << symbol;
        }
        cout << endl;
    }
    else if (direction == 'v') {
        for (int i = 0; i < numSymbols; i++) {
            cout << symbol << endl; 
        }
    }
    else {
        cout << "Неверное направление. Пожалуйста, введите 'h' для горизонтальной линии или 'v' для вертикальной." << endl;
    }

    return 0;
}
*/


//Задание:Хрень какая-та

/*
#include <iostream>
#include <vector>
#include <algorithm>
#include <iterator>
#include <string>
using namespace std;

int main() {
	vector<int> a;
	copy(istream_iterator<int>(cin), istream_iterator<int>(), back_inserter(a));
	cout << "Vector: ";
	copy(a.begin(), a.end(), ostream_iterator<int>(cout, " "));
	cout << endl;
	for_each(a.begin(), a.end(), [](const int a)
		{
			cout << string(a, '*') << endl;
		});
	return 0;
}
*/


//Задание:Создайте программу, которая запрашивает у пользователя массив из 20 целых чисел 
(в диапазоне от 0 до 9) и строит гистограмму частоты этих чисел с использованием символов *.

/*
#include <iostream>
#include <vector>
using namespace std;

int main() {
    setlocale(LC_ALL, "russian");
    const int size = 20;
    const int range = 10;

    vector<int> numbers(size);
    vector<int> frequency(range, 0); 

    cout << "Введите 20 целых чисел в диапазоне от 0 до 9:\n";
    for (int i = 0; i < size; i++) {
        do {
            cout << "Число " << (i + 1) << ": ";
            cin >> numbers[i];
            if (numbers[i] < 0 || numbers[i] > 9) {
                cout << "Ошибка: пожалуйста, введите число от 0 до 9.\n";
            }
        } while (numbers[i] < 0 || numbers[i] > 9);

        frequency[numbers[i]]++;
    }

    cout << "\nГистограмма частоты чисел от 0 до 9:\n";
    for (int i = 0; i < range; i++) {
        cout << i << ": ";
        for (int j = 0; j < frequency[i]; j++) {
            cout << "*";
        }
        cout << endl; 
    }

    return 0;
}
*/


//Задание:Дописать функцию сортировки шейкером (Shaker sort),
которая принимает динамический массив и его размер, сортирует и возвращает.

/*
#include <iostream>
using namespace std;

void shakerSort(int* arr, int size) {
    int left = 0;
    int right = size - 1;
    bool swapped = true;

    while (swapped) {
        swapped = false;

        for (int i = left; i < right; i++) {
            if (arr[i] > arr[i + 1]) {
                swap(arr[i], arr[i + 1]);
                swapped = true;
            }
        }

        if (!swapped)
            break;

        right--;

        swapped = false;

        for (int i = right; i > left; i--) {
            if (arr[i] < arr[i - 1]) {
                swap(arr[i], arr[i - 1]);
                swapped = true;
            }
        }

        left++;
    }
}

int main() {
    setlocale(LC_ALL, "russian");
    const int SIZE = 10;
    int mas[SIZE]{ 2, 1, 4, 5, 6, 4, 8, 4, 7, 9 };

    cout << "Массив до сортировки:\n";
    for (int i = 0; i < SIZE; ++i) {
        cout << mas[i] << " ";
    }
    cout << endl;

    shakerSort(mas, SIZE);

    cout << "Массив после сортировки:\n";
    for (int i = 0; i < SIZE; ++i) {
        cout << mas[i] << " ";
    }
    cout << endl;

    return 0;
}
*/


//Задание: написать функцию, которая транспонирует динамическую матрицу. Транспонирование - короче когда строки меняются со столбцами в матрице.

/*
#include <iostream>
using namespace std;

int** transponMatrix(int** matrix, int size_X, int size_Y) {
    int** transposed = new int* [size_Y];
    for (int i = 0; i < size_Y; i++) {
        transposed[i] = new int[size_X]; 
    }

    for (int i = 0; i < size_X; i++) {
        for (int j = 0; j < size_Y; j++) {
            transposed[j][i] = matrix[i][j]; 
        }
    }

    return transposed;
}

void printMatrix(int** matrix, int size_X, int size_Y) {
    for (int i = 0; i < size_X; i++) {
        for (int j = 0; j < size_Y; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
}

int** getRandomMatrix(int size_X, int size_Y) {
    int** matrix = new int* [size_X];

    for (int i = 0; i < size_X; i++) {
        matrix[i] = new int[size_Y];

        for (int j = 0; j < size_Y; j++) {
            matrix[i][j] = rand() % 9 + 1;
        }
    }

    return matrix;
}

void freeMatrix(int** matrix, int size_X) {
    for (int i = 0; i < size_X; i++) {
        delete[] matrix[i];
    }
    delete[] matrix;
}

int main() {
    setlocale(LC_ALL, "russian");
    int size_X = 5;
    int size_Y = 5;

    int** matrix = getRandomMatrix(size_X, size_Y);

    cout << "Исходная матрица:" << endl;
    printMatrix(matrix, size_X, size_Y);

    int** transposedMatrix = transponMatrix(matrix, size_X, size_Y);

    cout << "Транспонированная матрица:" << endl;
    printMatrix(transposedMatrix, size_Y, size_X);

    freeMatrix(matrix, size_X);
    freeMatrix(transposedMatrix, size_Y);

    return 0;
}
*/


//Задание:Треугольником Паскаля

/*
#include <iostream>
#include <vector>
using namespace std;

void printPascalsTriangle(int n) {
    vector<vector<int>> triangle(n);

    for (int i = 0; i < n; i++) {
        triangle[i].resize(i + 1);

        triangle[i][0] = 1;
        triangle[i][i] = 1;

        for (int j = 1; j < i; j++) {
            triangle[i][j] = triangle[i - 1][j - 1] + triangle[i - 1][j];
        }
    }

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            cout << " ";
        }

        for (int j = 0; j <= i; j++) {
            cout << triangle[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    setlocale(LC_ALL, "russian");
    int n;

    cout << "Введите натуральное число n: ";
    cin >> n;

    if (n <= 0) {
        cout << "Число должно быть натуральным." << endl;
        return 1;
    }

    printPascalsTriangle(n);

    return 0;
}
*/


//Задание:Написать функцию, вычисляющую n-ое число Фибоначчи без использования циклов.

/*
#include <iostream>
using namespace std;

int fibonacci(int n) {
    if (n <= 0) {
        throw invalid_argument("n должно быть положительным целым числом");
    }
    if (n == 1 || n == 2) {
        return 1; 
    }
    return fibonacci(n - 1) + fibonacci(n - 2);
}

int main() {
    setlocale(LC_ALL, "russian");
    int n;

    cout << "Введите номер числа Фибоначчи (n): ";
    cin >> n;

    try {
        int result = fibonacci(n);
        cout << "Число Фибоначчи с номером " << n << " равно " << result << endl;
    }
    catch (const invalid_argument& e) {
        cerr << e.what() << endl;
    }

    return 0;
}
*/


//Задание:Написать функцию возведения в степень n без использования циклов.

/*
#include <iostream>
using namespace std;

double power(double base, int exponent) {
    if (exponent == 0) {
        return 1;
    }
    else if (exponent < 0) {
        return 1 / power(base, -exponent); 
    }
    else {
        return base * power(base, exponent - 1);
    }
}

int main() {
    setlocale(LC_ALL, "russian");
    double base;
    int exponent;

    cout << "Введите число (основание): ";
    cin >> base;
    cout << "Введите степень: ";
    cin >> exponent;

    double result = power(base, exponent);
    cout << base << " в степени " << exponent << " равно " << result << endl;

    return 0;
}
*/


//Задание:Показывает входит ли число в определённый радиус или нет

/*
#include <iostream>
#include "math.h"
using namespace std;

int main()
{ 
    setlocale(LC_ALL, "russian");
    int x, y, z;
    cin >> x;
    cin >> y;
    double x0 = x, y0 = y;
    x = x * x;
    y = y * y;
    
    for (int i = 0; i < 2; i++) {
        switch (i) {
        case 0:
            x = -2.5;
            y = -0.1;
            break;

        case 1:
            x = -1.5;
            y = 0.1;
            break;
        }
    }

    if ((y0 >= -0.5 * x0 - 1) && (y0 <= 0.5 * x0 + 1) && (x0 < 0))
        cout << "Входит" << endl;
    else
        cout << "Не входит" << endl;
    return 0;
}
*/


/*
//Задание:1. Написать функцию копирования массива. В аргументы функции должны приходить копируемый
массив и его размер. Функция должна возвращать указатель на новый массив того же размера, имеющий те
же элементы, как и в копируемом.

/*
#include <iostream>
using namespace std;

int* copyArray(int* source, int size) {
    int* newArray = new int[size];

    for (int i = 0; i < size; ++i) {
        newArray[i] = source[i];
    }

    return newArray;
}

int main() {
    setlocale(LC_ALL, "russian");
    const int SIZE = 5;
    int array[] = { 1, 2, 3, 4, 5 };

    int* copiedArray = copyArray(array, SIZE);

    cout << "Скопированный массив:" << endl;
    for (int i = 0; i < SIZE; ++i) {
        cout << copiedArray[i] << " ";
    }
    cout << endl;

    return 0;
}
*/


/*
//Задание:Не знаю 

#include <iostream>
#include <vector>
#include <random>
#include <ctime>
using namespace std;

struct Figure {
    char id;
    vector<vector<int>> field;
};

vector<Figure> createFigures() {
    Figure I = { 'I', {{0, 1, 0, 0},
                      {0, 1, 0, 0},
                      {0, 1, 0, 0},
                      {0, 1, 0, 0}} };

    Figure J = { 'J', {{0, 0, 0},
                      {2, 2, 2},
                      {0, 0, 2}} };

    Figure L = { 'L', {{0, 3, 0},
                      {0, 3, 0},
                      {0, 3, 3}} };

    Figure O = { 'O', {{4, 4},
                      {4, 4}} };

    Figure S = { 'S', {{0, 5, 5},
                      {5, 5, 0},
                      {0, 0, 0}} };

    Figure T = { 'T', {{6, 6, 6},
                      {0, 6, 0},
                      {0, 0, 0}} };

    Figure Z = { 'Z', {{7, 7, 0},
                      {0, 7, 7},
                      {0, 0, 0}} };

    return { I, J, L, O, S, T, Z };
}

vector<Figure> generateRandomFigures(int count) {
    mt19937 rng(time(nullptr)); 
    uniform_int_distribution<> dist(0, 6);

    vector<Figure> figures = createFigures();
    vector<Figure> randomFigures; 

    for (int i = 0; i < count; ++i) {
        int index = dist(rng); 
        randomFigures.push_back(figures[index]); 
    }

    return randomFigures;
}

int main() {
    setlocale(LC_ALL, "russian");

    const int COUNT = 10; 
    auto randomFigures = generateRandomFigures(COUNT);

    for (const auto& figure : randomFigures) {
        cout << "Фигура: " << figure.id << "\n";

        for (const auto& row : figure.field) {
            for (int cell : row) {
                if (cell == 0)
                    cout << ". ";
                else
                    cout << cell << " ";
            }
            cout << "\n";
        }
        cout << "\n";
    }

    return 0;
}
*/

/*
//Задание:Не знаю

#include <iostream>
using namespace std;

double sumMatrix(int rows, int cols, double** matrix) {
    double totalSum = 0.0;

    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            totalSum += matrix[i][j];
        }
    }

    return totalSum;
}

int main()
{
    setlocale(LC_ALL, "russian");
    int rows, cols;
    cout << "Введите количество строк и столбцов матрицы: ";
    cin >> rows >> cols;

    double** matrix = new double* [rows];
    for (int i = 0; i < rows; ++i) {
        matrix[i] = new double[cols];
    }

    cout << "Введите элементы матрицы:" << endl;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            cin >> matrix[i][j];
        }
    }

    double result = sumMatrix(rows, cols, matrix);

    for (int i = 0; i < rows; ++i) {
        delete[] matrix[i];
    }
    delete[] matrix;

    cout << "Сумма элементов матрицы: " << result << endl;

    return 0;
}
*/


/*
//Задание:Меняет все гласные на знак _

#include <iostream>
#include <string>
using namespace std;

string replaceVowels(string str) {
    for (char& ch : str) { 
        if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' ||
            ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U') {
            ch = '_';
        }
    }
    return str; 
}

int main() {
    setlocale(LC_ALL, "russian");
    string input;
    cout << "Введите строку: ";
    getline(cin, input); 
    string output = replaceVowels(input); 
    cout << "Результат: " << output << endl; 
    return 0;
}
*/


/*
//Задание:Преобразует строку в нижний регистр(Все заглавные буквы в обычные)

#include <iostream>
#include <string>

using namespace std;

string toLowerCase(const string& str) {
    string lowerStr; 
    for (char ch : str) { 
        lowerStr += tolower(ch);
    }
    return lowerStr;
}

int main() {
    setlocale(LC_ALL, "russian");
    string input;
    cout << "Введите строку: ";
    getline(cin, input);
    string output = toLowerCase(input);
    cout << "Результат: " << output << endl;
    return 0;
}
*/


/*
//Задание:Меняет строку в верхний регистр(Все обычные буквы в заглавные)

#include <iostream>
#include <string>

using namespace std;

string toUpperCase(const string& str) {
    string upperStr; 
    for (char ch : str) { 
        upperStr += toupper(ch);
    }
    return upperStr;
}

int main() {
    setlocale(LC_ALL, "russian");
    string input;
    cout << "Введите строку: ";
    getline(cin, input); 
    string output = toUpperCase(input); 
    cout << "Результат: " << output << endl; 
    return 0;
}
*/

//Задача 1: Шифр атбаш: Первая буква алфавита заменяется на последнюю, вторая — на предпоследнюю и т. д..

/*
#include <iostream>
#include <string>
using namespace std;

string atbashCipher(string text) {
    string result = "";
    string alphabet = "abcdefghijklmnopqrstuvwxyz";

    for (int i = 0; i < text.length(); i++) {
        if (isalpha(text[i])) {
            char c = tolower(text[i]);
            if (isupper(text[i])) {
                c = tolower(text[i]);
            }

            size_t position = alphabet.find(c);
            if (position != string::npos) {
                char newChar = alphabet[alphabet.length() - position - 1];
                if (isupper(text[i])) {
                    newChar = toupper(newChar);
                }
                result += newChar;
            }
            else {
                result += text[i];
            }
        }
        else {
            result += text[i];
        }
    }

    return result;
}

int main() {
    setlocale(LC_ALL, "russian");
    string text;
    cout << "Введите текст для шифрования: ";
    getline(cin, text);

    string encryptedText = atbashCipher(text);
    cout << "Зашифрованный текст: " << encryptedText << endl;

    return 0;
}
*/

//Задача 2: Замена букв цифрами. Каждой букве соответствует число по алфавитному порядку: А
 — 1, B — 2, C — 3 и т. д.. Например, слово «TOWN» можно записать как «20 15 23 14»

/*
#include <iostream>
#include <string>
using namespace std;

int main() {
    setlocale(LC_ALL, "russian");
    string word;
    cout << "Введите слово: ";
    cin >> word;

    for (int i = 0; i < word.length(); i++) {
        char letter = toupper(word[i]);
        int num = letter - 'A' + 1;
        cout << num << " ";
    }

    return 0;
}
*/


//Задача 3: Написать функцию, принимающую исходную строку как аргумент и 
возвращающую строку без дубликатов символов.

/*
#include <iostream>
#include <string>
using namespace std;

string removeDuplicates(const string& str) {
    string result = "";

    for (char c : str) {
        if (result.find(c) == string::npos) {
            result += c;
        }
    }

    return result;
}

int main() {
    setlocale(LC_ALL, "russian");
    string input = "hello world";
    string output = removeDuplicates(input);

    cout << "Оригинальный текст: " << input << endl;
    cout << "Текст без дубликатов: " << output << endl;

    return 0;
}
*/


//Задача 4: написать функцию, проверяющую, является ли строка палиндромом

/*
#include <iostream>
#include <string>
#include <algorithm>
using namespace std;

bool isPalindrome(const string& str) {
    string temp = str;
    transform(temp.begin(), temp.end(), temp.begin(), ::tolower);
    temp.erase(remove_if(temp.begin(), temp.end(), ::isspace), temp.end());

    string reversed = temp;
    reverse(reversed.begin(), reversed.end());

    return temp == reversed;
}

int main() {
    setlocale(LC_ALL, "russian");
    string str;

    cout << "Введите строку: ";
    getline(cin, str);

    if (isPalindrome(str)) {
        cout << "Эта строка Палиндром" << endl;
    }
    else {
        cout << "Эта строка не палидром" << endl;
    }

    return 0;
}
*/

//1-Возврат массива чётных элементов: 
// Напишите функцию, которая принимает указатель на массив целых чисел
// и его размер, и возвращает указатель на новый массив,
// содержащий только четные элементы исходного массива.

/*
#include <iostream>
using namespace std;

int* getEvenElements(const int* arr, int size, int& newSize) {
    newSize = 0; 
    for (int i = 0; i < size; i++) {
        if (arr[i] % 2 == 0) {
            newSize++;
        }
    }

    if (newSize == 0) {
        return nullptr;
    }

    int* evenArr = new int[newSize];
    int index = 0;

    for (int i = 0; i < size; i++) {
        if (arr[i] % 2 == 0) {
            evenArr[index] = arr[i];
            index++;
        }
    }

    return evenArr;
}

int main() {
    setlocale(LC_ALL, "russian");
    int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int size = sizeof(arr) / sizeof(arr[0]);
    int newSize;

    int* evenElements = getEvenElements(arr, size, newSize);

    if (evenElements != nullptr) {
        cout << "Четные элементы: ";
        for (int i = 0; i < newSize; i++) {
            cout << evenElements[i] << " ";
        }
        cout << endl;

        delete[] evenElements;
    }
    else {
        cout << "Нет чётных элементов." << endl;
    }

    return 0;
}
*/


//2-Минимальный и максимальный элемент массива :
//Напишите две функции, которые принимают массив чисел
//и его размер.Первая функция должна вернуть максимальный 
//элемент, вторая - минимальный.

/*
#include <iostream>
using namespace std;

int findMax(const int* arr, int size) {
    int maxElement = arr[0];

    for (int i = 1; i < size; i++) {
        if (arr[i] > maxElement) {
            maxElement = arr[i];
        }
    }

    return maxElement;
}

int findMin(const int* arr, int size) {
    int minElement = arr[0];

    for (int i = 1; i < size; i++) {
        if (arr[i] < minElement) {
            minElement = arr[i]; 
        }
    }

    return minElement;
}

int main() {
    setlocale(LC_ALL, "russian");
    int arr[] = { 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5 };
    int size = sizeof(arr) / sizeof(arr[0]);

    int maxElement = findMax(arr, size);
    int minElement = findMin(arr, size);

    cout << "Максимальный элемент: " << maxElement << endl;
    cout << "Минимальный элемент: " << minElement << endl;

    return 0;
}
*/

//3-Количество слов в строке :
//Напишите функцию, которая принимает указатель на строку
//и возвращает количество слов в строке.Слова разделены пробелами.

/*
#include <iostream>
using namespace std;

int countWords(const char* str) {
    int count = 0;            
    bool inWord = false;      

    for (int i = 0; i < strlen(str); i++) {
        if (!isspace(str[i])) {
            if (!inWord) {
                count++;
                inWord = true; 
            }
        }
        else {
            inWord = false; 
        }
    }

    return count; 
}

int main() {
    setlocale(LC_ALL, "russian");
    const char* text = "   Привет   мир! Это   тестовая строка.  ";

    int wordCount = countWords(text);

    cout << "Количество слов в строке: " << wordCount << endl;

    return 0;
}
*/

/*
//Задание:Незнаю

#include <iostream>
using namespace std;

string* returnTest(string& str) { //Функция returnTest принимает одну переменную типа string по ссылке.
    string* stringPtr = new string; //Создание памяти под string по адресу 00000ABCX54                                             
    *stringPtr = str; //Берем по адресу 00000ABCX54 значение и устанавливаем его в "test" по адресу str           
    return stringPtr; // Возвращение памяти
}

int main() // вход в функцию main
{
    string str = "test"; //Вводная строка
    string* newStr = returnTest(str);// значение newStr присваивается returnTest(str)

    cout << newStr << endl;//Выводит адрес:000001E51C7F7B10
    cout << *newStr << endl;//Выводит адрес:test
    cout << &*newStr << endl;//Выводит адрес:000001F6A16C7970
    cout << *&*newStr << endl;//Выводит адрес:test
    cout << &*&*newStr << endl;//Выводит адрес:000001F6A16C7970
    cout << *&*&*newStr << endl;//Выводит адрес:test
}
*/


/*
//Задание:Незнаю

#include <iostream>
using namespace std;

struct Rectangle {
    double width;
    double height;

    Rectangle(double w = 0.0, double h = 0.0) : width(w), height(h) {}

    void display() const {
        cout << "Ширина: " << width << ", Высота: " << height << endl;
    }

    Rectangle operator+(const Rectangle& other) const {
        return Rectangle(width + other.width, height + other.height);
    }
    Rectangle operator-(const Rectangle& other) const {
        double newWidth = width - other.width;
        double newHeight = height - other.height;
        return Rectangle(newWidth < 0 ? 0 : newWidth,
            newHeight < 0 ? 0 : newHeight);
    }

    double operator/(const Rectangle& other) const {
        if (other.width == 0 || other.height == 0) {
            throw invalid_argument("Деление на прямоугольник с нулевой шириной или высотой!");
        }
        return (width * height) / (other.width * other.height);
    }

    Rectangle operator*(double scalar) const {
        return Rectangle(width * scalar, height * scalar);
    }

    double operator*(const Rectangle& other) const {
        return width * height * other.width * other.height;
    }

    double area() const {
        return width * height;
    }
};

int main() {
    setlocale(LC_ALL, "russian");

    Rectangle rect1(3.0, 4.0);
    Rectangle rect2(2.0, 5.0);

    cout << "Прямоугольник 1: ";
    rect1.display();
    cout << "Прямоугольник 2: ";
    rect2.display();

    Rectangle rectSum = rect1 + rect2;
    cout << "Сумма прямоугольников: ";
    rectSum.display();

    Rectangle rectDiff = rect1 - rect2;  
    cout << "Разность прямоугольников: ";
    rectDiff.display();

    double divisionResult = rect1 / rect2; 
    cout << "Количество фигур (площадь): " << divisionResult << endl;

    Rectangle rectScaled = rect1 * 2; 
    cout << "Увеличенный прямоугольник (в 2 раза): ";
    rectScaled.display();

    double areaProduct = rect1 * rect2; 
    cout << "Произведение площадей: " << areaProduct << endl;

    return 0;
}
*/

//1. Возврат массива чётных элементов: 
//Напишите функцию, которая принимает указатель
//на массив целых чисел и его размер, и возвращает 
//указатель на новый массив, содержащий только четные 
//элементы исходного массива. 

/*
#include <iostream>
using namespace std;

int* getEvenElements(const int* arr, int size, int& newSize) {
    newSize = 0;
    for (int i = 0; i < size; i++) {
        if (arr[i] % 2 == 0) {
            newSize++;
        }
    }

    int* evenArr = new int[newSize];
    int index = 0;

    for (int i = 0; i < size; i++) {
        if (arr[i] % 2 == 0) {
            evenArr[index++] = arr[i];
        }
    }

    return evenArr;
}

void freeArray(int* arr) {
    delete[] arr;
}

int main() {
    setlocale(LC_ALL, "russian");
    int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    int size = sizeof(arr) / sizeof(arr[0]);
    int newSize = 0;

    int* evenArr = getEvenElements(arr, size, newSize);

    cout << "Четные элементы: ";
    for (int i = 0; i < newSize; i++) {
        cout << evenArr[i] << " ";
    }
    cout << endl;

    freeArray(evenArr);

    return 0;
} */

//4. Сортировка: 
//Напишите функцию, которая принимает указатель на 
//динамический массив целых чисел и его размер, и 
//сортирует массив по возрастанию.



/*
#include <iostream>
#include <algorithm> 
using namespace std;

void sortArray(int* arr, int size) {
    sort(arr, arr + size); 
}

int main() {
    setlocale(LC_ALL, "russian");
    int size = 5;
    int* arr = new int[size] {5, 2, 9, 1, 5};

    cout << "Неотсортированный массив: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    sortArray(arr, size);

    cout << "Отсортированный массив: ";
    for (int i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    delete[] arr;

    return 0;
}
*/

/*
//Задание:Незнаю

#include <iostream>
#include <cstring> 

using namespace std;

void rotateMatrix(int n, int matrix[][n], int angle) {
    if (angle % 90 != 0 || angle < 0 || angle > 360) {
        throw invalid_argument("Угол должен быть кратен 90 градусам.");
    }

    angle %= 360;

    if (angle == 0) {
        return;
    }

    int newMatrix[n][n];

    switch (angle) {
    case 90:
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                newMatrix[j][n - 1 - i] = matrix[i][j];
            }
        }
        break;

    case 180:
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                newMatrix[n - 1 - i][n - 1 - j] = matrix[i][j];
            }
        }
        break;

    case 270:
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                newMatrix[n - 1 - j][i] = matrix[i][j];
            }
        }
        break;
    }

    memcpy(matrix, newMatrix, sizeof(newMatrix));
}

int main() {
    const int n = 3;

    int matrix[n][n] = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };

    cout << "Исходная матрица:" << endl;
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            cout << matrix[i][j] << ' ';
        }
        cout << endl;
    }

    try {
        rotateMatrix(n, matrix, 90);

        cout << "\nМатрица после поворота на 90 градусов:" << endl;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                cout << matrix[i][j] << ' ';
            }
            cout << endl;
        }

        rotateMatrix(n, matrix, 180);

        cout << "\nМатрица после поворота на 180 градусов:" << endl;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                cout << matrix[i][j] << ' ';
            }
            cout << endl;
        }

        rotateMatrix(n, matrix, 270);

        cout << "\nМатрица после поворота на 270 градусов:" << endl;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                cout << matrix[i][j] << ' ';
            }
            cout << endl;
        }
    }
    catch (const exception& e) {
        cerr << "Ошибка: " << e.what() << endl;
    }

    return 0;
}
*/

/*
//Задание:Незнаю

#include <iostream>
using namespace std;

int main() {
setlocale(LC_ALL,"russian");
    char symbol;
    
    cout << "Введите символ: ";
    cin >> symbol;

    if ('0' <= symbol && symbol <= '9') {
        cout << "Это цифра!" << endl;
    } else if (symbol == '&' || symbol == '#' || symbol == '<') {
        cout << "Это спецсимвол!" << endl;
    } else {
        cout << "Непредусмотренный вариант!" << endl;
    }

    return 0;
}
*/

/*
//Задание: Незнаю

#include <iostream>
#include <vector>
using namespace std;

   vector<pair<int, int>> findSaddlePoints(const vector<vector<int>>& matrix) {
    if (matrix.empty() || matrix[0].empty()) return {};

    const size_t rows = matrix.size();
    const size_t cols = matrix[0].size();

    vector<int> rowMins(rows);

    for (size_t i = 0; i < rows; ++i) {
        rowMins[i] = *min_element(matrix[i].begin(), matrix[i].end());
    }

    vector<pair<int, int>> saddlePoints;

    for (size_t i = 0; i < rows; ++i) {
        for (size_t j = 0; j < cols; ++j) {
            if (matrix[i][j] == rowMins[i]) {
                bool isMaxInCol = true;

                for (size_t k = 0; k < rows; ++k) {
                    if (matrix[k][j] > matrix[i][j]) {
                        isMaxInCol = false;
                        break;
                    }
                }

                if (isMaxInCol) {
                    saddlePoints.emplace_back(i, j);
                }
            }
        }
    }

    return saddlePoints;
}

int main() {
    setlocale(LC_ALL, "russian");

    vector<vector<int>> matrix = {
        {9, 8, 7},
        {5, 6, 10},
        {11, 12, 13}
    };

    auto result = findSaddlePoints(matrix);

    cout << "Седловые точки:\n";
    for (const auto& point : result) {
        cout << "(" << point.first + 1 << ", " << point.second + 1 << ") -> "
            << matrix[point.first][point.second] << "\n";
    }

    return 0;
}
*/

/*
//Задание:


*/

/*
//Задание:


*/

/*
//Задание:


*/







