package com.example.doks

import android.content.Intent
import android.net.Uri
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.toArgb
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalSoftwareKeyboardController
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.tooling.preview.Preview
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsControllerCompat
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import coil.compose.AsyncImage
import com.example.doks.models.GithubUser
import com.example.doks.models.PhoneResponse
import com.example.doks.models.SteamUser
import com.example.doks.ui.theme.DoksTheme
import com.example.doks.viewmodel.PeopleSearchViewModel
import androidx.compose.runtime.collectAsState
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()

        val windowInsetsController = WindowCompat.getInsetsController(window, window.decorView)
        windowInsetsController.isAppearanceLightStatusBars = false
        windowInsetsController.systemBarsBehavior = WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE

        window.statusBarColor = Color.Transparent.toArgb()
        window.navigationBarColor = Color.Black.toArgb()

        setContent {
            DoksTheme {
                AppNavigation()
            }
        }
    }
}

@Composable
fun AppNavigation() {
    val navController = rememberNavController()
    NavHost(navController = navController, startDestination = "main") {
        composable("main") {
            MainScreen(
                onPhoneSearchClick = { navController.navigate("phone_search") },
                onGithubSearchClick = { navController.navigate("github_search") },
                onSteamSearchClick = { navController.navigate("steam_search") }
            )
        }
        composable("phone_search") {
            val viewModel: PeopleSearchViewModel = viewModel()
            PhoneSearchScreen(
                onBack = { navController.popBackStack() },
                viewModel = viewModel
            )
        }
        composable("github_search") {
            val viewModel: PeopleSearchViewModel = viewModel()
            GithubSearchScreen(
                onBack = { navController.popBackStack() },
                viewModel = viewModel
            )
        }
        composable("steam_search") {
            val viewModel: PeopleSearchViewModel = viewModel()
            SteamSearchScreen(
                onBack = { navController.popBackStack() },
                viewModel = viewModel
            )
        }
    }
}

@Composable
fun MainScreen(
    onPhoneSearchClick: () -> Unit,
    onGithubSearchClick: () -> Unit,
    onSteamSearchClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    Box(
        modifier = modifier
            .fillMaxSize()
            .background(
                brush = Brush.verticalGradient(
                    colors = listOf(
                        Color(0xFF1A237E),
                        Color(0xFF000000)
                    )
                )
            )
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(24.dp),
            verticalArrangement = Arrangement.Center,
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                "Doks",
                style = MaterialTheme.typography.displayLarge.copy(fontSize = 48.sp),
                color = Color.White,
                modifier = Modifier.padding(bottom = 48.dp)
            )

            GradientButton(
                onClick = onPhoneSearchClick,
                icon = Icons.Default.Phone,
                text = "Поиск по номеру",
                gradientColors = listOf(
                    MaterialTheme.colorScheme.primary,
                    MaterialTheme.colorScheme.secondary
                ),
                modifier = Modifier
                    .fillMaxWidth()
                    .height(56.dp)
            )

            Spacer(modifier = Modifier.height(16.dp))

            GradientButton(
                onClick = onGithubSearchClick,
                icon = Icons.Default.Code,
                text = "Поиск на GitHub",
                gradientColors = listOf(
                    MaterialTheme.colorScheme.primary,
                    MaterialTheme.colorScheme.secondary
                ),
                modifier = Modifier
                    .fillMaxWidth()
                    .height(56.dp)
            )

            Spacer(modifier = Modifier.height(16.dp))

            GradientButton(
                onClick = onSteamSearchClick,
                icon = Icons.Default.Gamepad,
                text = "Поиск в Steam",
                gradientColors = listOf(
                    MaterialTheme.colorScheme.primary,
                    MaterialTheme.colorScheme.secondary
                ),
                modifier = Modifier
                    .fillMaxWidth()
                    .height(56.dp)
            )
        }
    }
}

@Composable
fun GradientButton(
    onClick: () -> Unit,
    icon: androidx.compose.ui.graphics.vector.ImageVector,
    text: String,
    gradientColors: List<Color>,
    modifier: Modifier = Modifier
) {
    Button(
        onClick = onClick,
        modifier = modifier,
        shape = RoundedCornerShape(16.dp),
        colors = ButtonDefaults.buttonColors(
            containerColor = Color.Transparent
        ),
        contentPadding = PaddingValues()
    ) {
        Box(
            modifier = Modifier
                .fillMaxSize()
                .background(
                    brush = Brush.horizontalGradient(colors = gradientColors),
                    shape = RoundedCornerShape(16.dp)
                ),
            contentAlignment = Alignment.Center
        ) {
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.Center
            ) {
                Icon(
                    imageVector = icon,
                    contentDescription = null,
                    tint = Color.White,
                    modifier = Modifier.size(24.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text(
                    text = text,
                    style = MaterialTheme.typography.titleMedium,
                    color = Color.White
                )
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun PhoneSearchScreen(
    onBack: () -> Unit,
    viewModel: PeopleSearchViewModel,
    modifier: Modifier = Modifier
) {
    val uiState by viewModel.uiState.collectAsState()
    var searchQuery by remember { mutableStateOf("") }
    val keyboardController = LocalSoftwareKeyboardController.current

    Scaffold(
        modifier = modifier,
        containerColor = Color.Transparent,
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        "Поиск по номеру",
                        modifier = Modifier.fillMaxWidth(),
                        textAlign = TextAlign.Center,
                        color = Color.White
                    )
                },
                navigationIcon = {
                    IconButton(onClick = onBack) {
                        Icon(Icons.Default.ArrowBack, null, tint = Color.White)
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = Color(0x99000000),
                    titleContentColor = Color.White
                )
            )
        }
    ) { padding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .background(
                    brush = Brush.verticalGradient(
                        colors = listOf(
                            Color(0xFF1A237E),
                            Color(0xFF000000)
                        )
                    )
                )
                .padding(padding)
                .padding(horizontal = 24.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            OutlinedTextField(
                value = searchQuery,
                onValueChange = { searchQuery = it },
                label = { Text("Номер телефона") },
                placeholder = { Text("+7 912 345-67-89") },
                leadingIcon = { Icon(Icons.Default.Phone, null) },
                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Phone),
                keyboardActions = KeyboardActions(onDone = { keyboardController?.hide() }),
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(16.dp),
                colors = OutlinedTextFieldDefaults.colors(
                    focusedContainerColor = Color(0x66000000),
                    unfocusedContainerColor = Color(0x66000000),
                    cursorColor = Color.White,
                    focusedBorderColor = MaterialTheme.colorScheme.primary,
                    unfocusedBorderColor = Color.White.copy(alpha = 0.5f),
                    focusedLabelColor = MaterialTheme.colorScheme.primary,
                    unfocusedLabelColor = Color.White.copy(alpha = 0.7f)
                )
            )

            GradientButton(
                onClick = {
                    if (searchQuery.isNotBlank()) {
                        viewModel.searchByPhoneForAccounts(searchQuery)
                        keyboardController?.hide()
                    }
                },
                icon = Icons.Default.Search,
                text = "Найти",
                gradientColors = listOf(
                    MaterialTheme.colorScheme.primary,
                    MaterialTheme.colorScheme.secondary
                ),
                modifier = Modifier
                    .fillMaxWidth()
                    .height(56.dp)
            )

            when (val state = uiState) {
                is PeopleSearchViewModel.UiState.Loading -> {
                    Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {
                        CircularProgressIndicator(color = Color.White)
                    }
                }
                is PeopleSearchViewModel.UiState.Success -> {
                    state.phoneData?.let { phoneData ->
                        PhoneInfo(phoneData)
                    }
                    val accounts = state.userData as? List<String>
                    if (accounts != null && accounts.isNotEmpty()) {
                        AccountsInfo(accounts = accounts)
                    } else {
                        InfoMessage("Аккаунты не найдены", Icons.Default.Info, Color.Red)
                    }
                }
                is PeopleSearchViewModel.UiState.Error -> {
                    InfoMessage(
                        "Ошибка: ${state.message}",
                        Icons.Default.Error,
                        MaterialTheme.colorScheme.error
                    )
                }
                is PeopleSearchViewModel.UiState.Idle -> {
                    InfoMessage(
                        "Введите номер для поиска",
                        Icons.Default.Search,
                        Color.White.copy(alpha = 0.7f)
                    )
                }
            }
        }
    }
}

@Composable
fun PhoneInfo(phone: PhoneResponse) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp),
        shape = MaterialTheme.shapes.large,
        colors = CardDefaults.cardColors(
            containerColor = Color(0xCC000000)
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text(
                "Информация о номере",
                style = MaterialTheme.typography.titleLarge,
                color = MaterialTheme.colorScheme.primary
            )
            Spacer(modifier = Modifier.height(8.dp))
            Text("Номер: ${phone.international_format}", style = MaterialTheme.typography.bodyMedium, color = Color.White)
            phone.country_name?.let { country ->
                Text("Страна: $country (${phone.country_code})", style = MaterialTheme.typography.bodyMedium, color = Color.White)
            }
            phone.location?.let { location ->
                Text("Регион: $location", style = MaterialTheme.typography.bodyMedium, color = Color.White)
            }
            phone.carrier?.let { carrier ->
                Text("Оператор: $carrier", style = MaterialTheme.typography.bodyMedium, color = Color.White)
            }
            phone.line_type?.let { lineType ->
                Text("Тип линии: $lineType", style = MaterialTheme.typography.bodyMedium, color = Color.White)
            }
        }
    }
}

@Composable
fun AccountsInfo(accounts: List<String>) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp),
        shape = MaterialTheme.shapes.large,
        colors = CardDefaults.cardColors(
            containerColor = Color(0xCC000000)
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Text(
                "Найденные аккаунты",
                style = MaterialTheme.typography.titleLarge,
                color = MaterialTheme.colorScheme.primary
            )
            Spacer(modifier = Modifier.height(8.dp))
            accounts.forEach { account ->
                val context = LocalContext.current
                Text(
                    text = account,
                    style = MaterialTheme.typography.bodyMedium,
                    color = Color.White,
                    modifier = Modifier
                        .clickable {
                            try {
                                val intent = Intent(Intent.ACTION_VIEW, Uri.parse(account))
                                context.startActivity(intent)
                            } catch (e: Exception) {
                                // Обработка ошибки, если активность не может быть запущена
                                e.printStackTrace()
                            }
                        }
                        .padding(vertical = 4.dp)
                )
            }
        }
    }
}

@Composable
fun InfoMessage(message: String, icon: androidx.compose.ui.graphics.vector.ImageVector, color: Color) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 16.dp),
        horizontalArrangement = Arrangement.Center,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Icon(
            imageVector = icon,
            contentDescription = null,
            tint = color,
            modifier = Modifier.size(24.dp)
        )
        Spacer(modifier = Modifier.width(8.dp))
        Text(
            text = message,
            style = MaterialTheme.typography.bodyLarge,
            color = color
        )
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun GithubSearchScreen(
    onBack: () -> Unit,
    viewModel: PeopleSearchViewModel,
    modifier: Modifier = Modifier
) {
    val uiState by viewModel.uiState.collectAsState()
    var searchQuery by remember { mutableStateOf("") }
    val keyboardController = LocalSoftwareKeyboardController.current

    Scaffold(
        modifier = modifier,
        containerColor = Color.Transparent,
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        "Поиск на GitHub",
                        modifier = Modifier.fillMaxWidth(),
                        textAlign = TextAlign.Center,
                        color = Color.White
                    )
                },
                navigationIcon = {
                    IconButton(onClick = onBack) {
                        Icon(Icons.Default.ArrowBack, null, tint = Color.White)
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = Color(0x99000000),
                    titleContentColor = Color.White
                )
            )
        }
    ) { padding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .background(
                    brush = Brush.verticalGradient(
                        colors = listOf(
                            Color(0xFF1A237E),
                            Color(0xFF000000)
                        )
                    )
                )
                .padding(padding)
                .padding(horizontal = 24.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            OutlinedTextField(
                value = searchQuery,
                onValueChange = { searchQuery = it },
                label = { Text("Имя пользователя") },
                placeholder = { Text("Введите имя пользователя") },
                leadingIcon = { Icon(Icons.Default.Code, null) },
                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text),
                keyboardActions = KeyboardActions(onDone = { keyboardController?.hide() }),
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(16.dp),
                colors = OutlinedTextFieldDefaults.colors(
                    focusedContainerColor = Color(0x66000000),
                    unfocusedContainerColor = Color(0x66000000),
                    cursorColor = Color.White,
                    focusedBorderColor = MaterialTheme.colorScheme.primary,
                    unfocusedBorderColor = Color.White.copy(alpha = 0.5f),
                    focusedLabelColor = MaterialTheme.colorScheme.primary,
                    unfocusedLabelColor = Color.White.copy(alpha = 0.7f)
                )
            )

            GradientButton(
                onClick = {
                    if (searchQuery.isNotBlank()) {
                        viewModel.searchOnGithub(searchQuery)
                        keyboardController?.hide()
                    }
                },
                icon = Icons.Default.Search,
                text = "Найти",
                gradientColors = listOf(
                    MaterialTheme.colorScheme.primary,
                    MaterialTheme.colorScheme.secondary
                ),
                modifier = Modifier
                    .fillMaxWidth()
                    .height(56.dp)
            )

            when (val state = uiState) {
                is PeopleSearchViewModel.UiState.Loading -> {
                    Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {
                        CircularProgressIndicator(color = Color.White)
                    }
                }
                is PeopleSearchViewModel.UiState.Success -> {
                    val user = state.userData as? GithubUser
                    if (user != null) {
                        GitHubUserInfo(user)
                    } else {
                        InfoMessage("Пользователь не найден", Icons.Default.Info, Color.Red)
                    }
                }
                is PeopleSearchViewModel.UiState.Error -> {
                    InfoMessage(
                        "Ошибка: ${state.message}",
                        Icons.Default.Error,
                        MaterialTheme.colorScheme.error
                    )
                }
                is PeopleSearchViewModel.UiState.Idle -> {
                    InfoMessage(
                        "Введите имя пользователя для поиска",
                        Icons.Default.Search,
                        Color.White.copy(alpha = 0.7f)
                    )
                }
            }
        }
    }
}

@Composable
fun GitHubUserInfo(user: GithubUser) {
    var selectedTab by remember { mutableStateOf(0) }
    val tabs = listOf("Основное", "Контакты", "Статистика")
    val context = LocalContext.current

    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp),
        shape = MaterialTheme.shapes.large,
        colors = CardDefaults.cardColors(
            containerColor = Color(0xCC000000)
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Row(verticalAlignment = Alignment.CenterVertically) {
                user.avatar_url?.let { url ->
                    AsyncImage(
                        model = url,
                        contentDescription = "Аватар GitHub",
                        modifier = Modifier
                            .size(64.dp)
                            .clip(CircleShape),
                        contentScale = ContentScale.Crop
                    )
                    Spacer(modifier = Modifier.width(16.dp))
                }

                Column {
                    Text(
                        user.login ?: "Неизвестный пользователь",
                        style = MaterialTheme.typography.titleLarge,
                        color = MaterialTheme.colorScheme.primary
                    )
                    user.name?.let { name ->
                        Text(
                            name,
                            style = MaterialTheme.typography.titleMedium,
                            color = Color.White
                        )
                    }
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            TabRow(
                selectedTabIndex = selectedTab,
                containerColor = Color.Transparent,
                indicator = { tabPositions ->
                    if (tabPositions.isNotEmpty() && selectedTab < tabPositions.size) {
                        TabRowDefaults.SecondaryIndicator(
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(2.dp)
                                .offset(x = tabPositions[selectedTab].left)
                                .width(tabPositions[selectedTab].width),
                            color = MaterialTheme.colorScheme.primary
                        )
                    }
                }
            ) {
                tabs.forEachIndexed { index, title ->
                    Tab(
                        selected = selectedTab == index,
                        onClick = { selectedTab = index },
                        text = {
                            Text(
                                title,
                                color = if (selectedTab == index) MaterialTheme.colorScheme.primary else Color.White.copy(alpha = 0.7f)
                            )
                        },
                        selectedContentColor = MaterialTheme.colorScheme.primary,
                        unselectedContentColor = Color.White.copy(alpha = 0.7f)
                    )
                }
            }

            when (selectedTab) {
                0 -> GitHubBasicInfoTab(user)
                1 -> GitHubContactsTab(user, context)
                2 -> GitHubStatsTab(user)
            }
        }
    }
}

@Composable
fun GitHubBasicInfoTab(user: GithubUser) {
    Column(modifier = Modifier.padding(top = 16.dp)) {
        user.company?.let { company ->
            Text(
                "Компания: $company",
                style = MaterialTheme.typography.bodyMedium,
                color = Color.White
            )
            Spacer(modifier = Modifier.height(8.dp))
        }
        user.location?.let { location ->
            Text(
                "Местоположение: $location",
                style = MaterialTheme.typography.bodyMedium,
                color = Color.White
            )
        }
    }
}

@Composable
fun GitHubContactsTab(user: GithubUser, context: android.content.Context) {
    Column(modifier = Modifier.padding(top = 16.dp)) {
        user.email?.let { email ->
            Text(
                "Email: $email",
                style = MaterialTheme.typography.bodyMedium,
                color = Color.White
            )
            Spacer(modifier = Modifier.height(8.dp))
        }
        user.blog?.let { blog ->
            Text(
                "Блог: $blog",
                style = MaterialTheme.typography.bodyMedium,
                color = Color.White,
                modifier = Modifier.clickable {
                    try {
                        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(blog))
                        context.startActivity(intent)
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }
                }
            )
            Spacer(modifier = Modifier.height(8.dp))
        }
        user.html_url?.let { url ->
            Text(
                "Профиль: $url",
                style = MaterialTheme.typography.bodyMedium,
                color = Color.White,
                modifier = Modifier.clickable {
                    try {
                        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))
                        context.startActivity(intent)
                    } catch (e: Exception) {
                        e.printStackTrace()
                    }
                }
            )
        }
    }
}

@Composable
fun GitHubStatsTab(user: GithubUser) {
    Column(modifier = Modifier.padding(top = 16.dp)) {
        user.publicRepos?.let { repos ->
            Text(
                "Публичные репозитории: $repos",
                style = MaterialTheme.typography.bodyMedium,
                color = Color.White
            )
            Spacer(modifier = Modifier.height(8.dp))
        }
        user.followers?.let { followers ->
            Text(
                "Подписчики: $followers",
                style = MaterialTheme.typography.bodyMedium,
                color = Color.White
            )
            Spacer(modifier = Modifier.height(8.dp))
        }
        user.following?.let { following ->
            Text(
                "Подписки: $following",
                style = MaterialTheme.typography.bodyMedium,
                color = Color.White
            )
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SteamSearchScreen(
    onBack: () -> Unit,
    viewModel: PeopleSearchViewModel,
    modifier: Modifier = Modifier
) {
    val uiState by viewModel.uiState.collectAsState()
    var searchQuery by remember { mutableStateOf("") }
    val keyboardController = LocalSoftwareKeyboardController.current

    Scaffold(
        modifier = modifier,
        containerColor = Color.Transparent,
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        "Поиск в Steam",
                        modifier = Modifier.fillMaxWidth(),
                        textAlign = TextAlign.Center,
                        color = Color.White
                    )
                },
                navigationIcon = {
                    IconButton(onClick = onBack) {
                        Icon(Icons.Default.ArrowBack, null, tint = Color.White)
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = Color(0x99000000),
                    titleContentColor = Color.White
                )
            )
        }
    ) { padding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .background(
                    brush = Brush.verticalGradient(
                        colors = listOf(
                            Color(0xFF1A237E),
                            Color(0xFF000000)
                        )
                    )
                )
                .padding(padding)
                .padding(horizontal = 24.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            OutlinedTextField(
                value = searchQuery,
                onValueChange = { searchQuery = it },
                label = { Text("Steam ID") },
                placeholder = { Text("Введите Steam ID") },
                leadingIcon = { Icon(Icons.Default.Gamepad, null) },
                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Text),
                keyboardActions = KeyboardActions(onDone = { keyboardController?.hide() }),
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(16.dp),
                colors = OutlinedTextFieldDefaults.colors(
                    focusedContainerColor = Color(0x66000000),
                    unfocusedContainerColor = Color(0x66000000),
                    cursorColor = Color.White,
                    focusedBorderColor = MaterialTheme.colorScheme.primary,
                    unfocusedBorderColor = Color.White.copy(alpha = 0.5f),
                    focusedLabelColor = MaterialTheme.colorScheme.primary,
                    unfocusedLabelColor = Color.White.copy(alpha = 0.7f)
                )
            )

            GradientButton(
                onClick = {
                    if (searchQuery.isNotBlank()) {
                        viewModel.searchOnSteam(searchQuery)
                        keyboardController?.hide()
                    }
                },
                icon = Icons.Default.Search,
                text = "Найти",
                gradientColors = listOf(
                    MaterialTheme.colorScheme.primary,
                    MaterialTheme.colorScheme.secondary
                ),
                modifier = Modifier
                    .fillMaxWidth()
                    .height(56.dp)
            )

            when (val state = uiState) {
                is PeopleSearchViewModel.UiState.Loading -> {
                    Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.Center) {
                        CircularProgressIndicator(color = Color.White)
                    }
                }
                is PeopleSearchViewModel.UiState.Success -> {
                    val user = state.userData as? SteamUser
                    if (user != null) {
                        SteamUserInfo(user)
                    } else {
                        InfoMessage("Пользователь не найден", Icons.Default.Info, Color.Red)
                    }
                }
                is PeopleSearchViewModel.UiState.Error -> {
                    InfoMessage(
                        "Ошибка: ${state.message}",
                        Icons.Default.Error,
                        MaterialTheme.colorScheme.error
                    )
                }
                is PeopleSearchViewModel.UiState.Idle -> {
                    InfoMessage(
                        "Введите Steam ID для поиска",
                        Icons.Default.Search,
                        Color.White.copy(alpha = 0.7f)
                    )
                }
            }
        }
    }
}

@Composable
fun SteamUserInfo(user: SteamUser) {
    val context = LocalContext.current

    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp),
        shape = MaterialTheme.shapes.large,
        colors = CardDefaults.cardColors(
            containerColor = Color(0xCC000000)
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column(modifier = Modifier.padding(16.dp)) {
            Row(verticalAlignment = Alignment.CenterVertically) {
                user.avatar?.let { avatarUrl ->
                    AsyncImage(
                        model = avatarUrl,
                        contentDescription = "Аватар Steam",
                        modifier = Modifier
                            .size(64.dp)
                            .clip(CircleShape),
                        contentScale = ContentScale.Crop
                    )
                    Spacer(modifier = Modifier.width(16.dp))
                }

                Column {
                    Text(
                        user.personaname ?: "Неизвестный пользователь",
                        style = MaterialTheme.typography.titleLarge,
                        color = MaterialTheme.colorScheme.primary
                    )
                    user.realName?.let { name ->
                        Text(
                            name,
                            style = MaterialTheme.typography.titleMedium,
                            color = Color.White
                        )
                    }
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            user.profileUrl?.let { url ->
                Text(
                    text = "Профиль: $url",
                    style = MaterialTheme.typography.bodyMedium,
                    color = Color.White,
                    modifier = Modifier.clickable {
                        try {
                            val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))
                            context.startActivity(intent)
                        } catch (e: Exception) {
                            e.printStackTrace()
                        }
                    }
                )
            }

            user.countryCode?.let { country ->
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = "Страна: $country",
                    style = MaterialTheme.typography.bodyMedium,
                    color = Color.White
                )
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun MainScreenPreview() {
    DoksTheme {
        MainScreen(
            onPhoneSearchClick = {},
            onGithubSearchClick = {},
            onSteamSearchClick = {}
        )
    }
}
