#include <iostream>
#include <windows.h>
#include <vector>
#include <cstdlib>
using namespace std;

const int SIZE_MAP_X = 10;
const int SIZE_MAP_Y = 10;
char** map = new char* [SIZE_MAP_X];
int foodX, foodY;

struct SnakeSegment {
    int x;
    int y;
};

vector<SnakeSegment> snake;

void InitMap() {
    for (int i = 0; i < SIZE_MAP_X; i++) {
        map[i] = new char[SIZE_MAP_Y];
        for (int j = 0; j < SIZE_MAP_Y; j++) {
            if ( i == 0 || i == SIZE_MAP_X - 1 || j == 0 || j == SIZE_MAP_Y - 1) {
                map[i][j] = '*';
            }
            else {
                map[i][j] = ' ';
            }
        }
    }
}

void PrintMap() {
    system("cls");
    for (int i = 0; i < SIZE_MAP_X; i++) {
        for (int j = 0; j < SIZE_MAP_Y; j++) {
            cout << map[i][j];
        }
        cout << endl;
    }
}

void PlaceFood() {
    do {
        foodX = rand() % (SIZE_MAP_X - 2) + 1;
        foodY = rand() % (SIZE_MAP_Y - 2) + 1;
    } while (map[foodX][foodY] != ' ');
    map[foodX][foodY] = '#';
}

bool MoveSnake(int newX, int newY) {
    if (map[newX][newY] == '*' || map[newX][newY] == '@') {
        return false;
    }

    SnakeSegment newSegment;
    newSegment.x = newX;
    newSegment.y = newY;
    snake.insert(snake.begin(), newSegment);

    if (newX == foodX && newY == foodY) {
        PlaceFood();
    }
    else {
        SnakeSegment tail = snake.back();
        map[tail.x][tail.y] = ' ';
        snake.pop_back();
    }

    map[newX][newY] = '@';
    return true;
}


bool CanMove(int x, int y) {
    return map[x][y] != '*' && map[x][y] != '@';
}


void MoveAI() {
    int headX = snake[0].x;
    int headY = snake[0].y;

    int dirX = 0, dirY = 0;

    if (headX < foodX && CanMove(headX + 1, headY)) {
        dirX = 1;
    }
    else if (headX > foodX && CanMove(headX - 1, headY)) {
        dirX = -1;
    }
    else if (headY < foodY && CanMove(headX, headY + 1)) {
        dirY = 1;
    }
    else if (headY > foodY && CanMove(headX, headY - 1)) {
        dirY = -1;
    }
    else {
        int found = false;
        for (int i = -1; i <= 1 && !found; i++) {
            for (int j = -1; j <= 1 && !found; j++) {
                if (abs(i) + abs(j) == 1) {
                    int newX = headX + i;
                    int newY = headY + j;
                    if (CanMove(newX, newY) && (newX != snake[1].x || newY != snake[1].y)) {
                        dirX = i;
                        dirY = j;
                        found = true;
                    }
                }
            }
        }
        if (!found) {
            cout << "Game Over! No more moves available." << endl;
            return;
        }
    }

    if (!MoveSnake(headX + dirX, headY + dirY)) {
        cout << "Game Over! Collision detected." << endl;
    }

    if (snake.size() == (SIZE_MAP_X - 2) * (SIZE_MAP_Y - 2)) {
        cout << "Congratulations! You have filled the board!" << endl;
        exit(0);
    }
}

int main() {
    srand(time(0));
    InitMap();

    snake.push_back({ SIZE_MAP_X / 2, SIZE_MAP_Y / 2 });
    map[SIZE_MAP_X / 2][SIZE_MAP_Y / 2] = '@';

    PlaceFood();

    while (true) {
        PrintMap();
        MoveAI();
        Sleep(100);
    }

    for (int i = 0; i < SIZE_MAP_X; i++) {
        delete[] map[i];
    }
    delete[] map;
    return 0;
}
