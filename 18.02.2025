/*
Задание 1
1. Опишите класс «Конус».
Данные: координаты центра основания, радиус основания, высота.
Конструкторы: конструктор по умолчанию, конструктор конуса с центром в начале координат, конструктор произвольного конуса.
2. Определите методы: вычисление площади поверхности, вычисление
объема. Для ввода и вывода на экран перегрузите операции >> и <<.
3. Объявите несколько конусов с использованием различных конструкторов, найдите площадь поверхности и объем каждого.

Задание 2
1. Опишите класс «Усеченный конус», производный от конуса.
2. Определите конструкторы по умолчанию и с параметрами.
3. Переопределите методы вычисления площади поверхности и объема 
для усеченного конуса с использованием методов базового класса.
4. Для ввода и вывода на экран перегрузите операции >> и <<.
5. Объявите несколько усеченных конусов, выведите на экран их площади поверхности и объемы.
6. Определите методы сравнения конусов.
7. Определите несколько усеченных конусов, наследующих одному базовому конусу.
*/
/*


#include <iostream>
#include <cmath> 
using namespace std;

const double PI = acos(-1.0);

class Cone {
private:
    double x;  
    double y;
    double radius;
    double height; 

public:
    Cone() : x(0), y(0), radius(0), height(0) {}

    Cone(double r, double h) : x(0), y(0), radius(r), height(h) {}

    Cone(double _x, double _y, double r, double h) : x(_x), y(_y), radius(r), height(h) {}

    double volume() const {
        return PI * pow(radius, 2) * height / 3.0;
    }

    double surfaceArea() const {
        double slantHeight = sqrt(pow(height, 2) + pow(radius, 2));
        return PI * radius * (radius + slantHeight);
    }

    friend istream& operator>>(istream& in, Cone& cone) {
        in >> cone.x >> cone.y >> cone.radius >> cone.height;
        return in;
    }

    friend ostream& operator<<(ostream& out, const Cone& cone) {
        out << "Center: (" << cone.x << ", " << cone.y << "), Radius: "
            << cone.radius << ", Height: " << cone.height << endl;
        return out;
    }
};

int main() {
    Cone c1; 
    Cone c2(5, 10);
    Cone c3(4, 6, 7, 12);

    cout << "Cone 1:" << endl;
    cout << c1 << endl;
    cout << "Volume: " << c1.volume() << endl;
    cout << "Surface Area: " << c1.surfaceArea() << endl << endl;

    cout << "Cone 2:" << endl;
    cout << c2 << endl;
    cout << "Volume: " << c2.volume() << endl;
    cout << "Surface Area: " << c2.surfaceArea() << endl << endl;

    cout << "Cone 3:" << endl;
    cout << c3 << endl;
    cout << "Volume: " << c3.volume() << endl;
    cout << "Surface Area: " << c3.surfaceArea() << endl;

    return 0;
}
*/


#include <iostream>
#include <cmath>
using namespace std;

const double PI = acos(-1.0);

class Cone {
protected:
    double x; 
    double y;
    double radius; 
    double height; 

public:
    Cone() : x(0), y(0), radius(0), height(0) {}

    Cone(double r, double h) : x(0), y(0), radius(r), height(h) {}

    Cone(double _x, double _y, double r, double h) : x(_x), y(_y), radius(r), height(h) {}

    virtual double volume() const {
        return PI * pow(radius, 2) * height / 3.0;
    }

    virtual double surfaceArea() const {
        double slantHeight = sqrt(pow(height, 2) + pow(radius, 2));
        return PI * radius * (slantHeight + radius);
    }

    friend istream& operator>>(istream& in, Cone& cone) {
        in >> cone.x >> cone.y >> cone.radius >> cone.height;
        return in;
    }

    friend ostream& operator<<(ostream& out, const Cone& cone) {
        out << "Center: (" << cone.x << ", " << cone.y << "), Radius: "
            << cone.radius << ", Height: " << cone.height << endl;
        return out;
    }
};

class TruncatedCone : public Cone {
private:
    double upperRadius;
    double truncatedHeight; 

public:
    TruncatedCone() : Cone(), upperRadius(0), truncatedHeight(0) {}

    TruncatedCone(double _x, double _y, double lowerR, double upperR, double h)
        : Cone(_x, _y, lowerR, h), upperRadius(upperR), truncatedHeight(h) {}

    double volume() const override {
        double fullConeVolume = Cone::volume();
        double upperConeVolume = PI * pow(upperRadius, 2) * truncatedHeight / 3.0;
        return fullConeVolume - upperConeVolume;
    }

    double surfaceArea() const override {
        double slantHeight = sqrt(pow(truncatedHeight, 2) + pow(radius - upperRadius, 2));
        return PI * (radius * (slantHeight + radius) + upperRadius * (slantHeight + upperRadius));
    }

    friend istream& operator>>(istream& in, TruncatedCone& tc) {
        in >> static_cast<Cone&>(tc) >> tc.upperRadius >> tc.truncatedHeight;
        return in;
    }

    friend ostream& operator<<(ostream& out, const TruncatedCone& tc) {
        out << static_cast<const Cone&>(tc) << "Upper Radius: " << tc.upperRadius
            << ", Truncated Height: " << tc.truncatedHeight << endl;
        return out;
    }

    bool isLargerThan(const TruncatedCone& other) const {
        return volume() > other.volume();
    }
};

int main() {
    TruncatedCone t1(0, 0, 10, 8, 15);
    TruncatedCone t2(5, 5, 20, 16, 25);
    TruncatedCone t3(t1);

    cout << "Truncated Cone 1:" << endl;
    cout << t1 << endl;
    cout << "Volume: " << t1.volume() << endl;
    cout << "Surface Area: " << t1.surfaceArea() << endl << endl;

    cout << "Truncated Cone 2:" << endl;
    cout << t2 << endl;
    cout << "Volume: " << t2.volume() << endl;
    cout << "Surface Area: " << t2.surfaceArea() << endl << endl;

    cout << "Truncated Cone 3 (copy of T1):" << endl;
    cout << t3 << endl;
    cout << "Volume: " << t3.volume() << endl;
    cout << "Surface Area: " << t3.surfaceArea() << endl << endl;

    if (t1.isLargerThan(t2)) {
        cout << "Усеченный конус 1 больше по объему чем усеченный конус 2." << endl;
    }
    else {
        cout << "Усеченный конус 2 больше по объему чем усеченный конус 1." << endl;
    }

    return 0;
}
