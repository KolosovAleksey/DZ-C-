//*#include <iostream>
#include <vector>
#include <unordered_map>

int main() {
    // Вводим размер массива
    int n;
    std::cout << "Введите размер массива: ";
    std::cin >> n;

    std::vector<int> arr(n);
    
    // Вводим элементы массива
    std::cout << "Введите элементы массива: ";
    for (int i = 0; i < n; i++) {
        std::cin >> arr[i];
    }

    // Используем unordered_map для подсчета количества вхождений
    std::unordered_map<int, int> frequency;

    // Подсчитываем частоту каждого элемента
    for (int i = 0; i < n; i++) {
        frequency[arr[i]]++;
    }

    // Выводим элементы, которые повторяются два и более раз
    std::cout << "Повторяющиеся элементы: ";
    bool found = false;
    for (const auto &pair : frequency) {
        if (pair.second > 1) {
            std::cout << pair.first << " ";
            found = true;
        }
    }

    if (!found) {
        std::cout << "Нет повторяющихся элементов.";
    }

    std::cout << std::endl;
    return 0;
}*//




//*#include <iostream>
#include <vector>
#include <limits>
using namespace std;

int main() {
    setlocale(LC_ALL, "russian");
    int n, m;

    cout << "Введите количество строк (n): ";
    cin >> n;
    cout << "Введите количество столбцов (m): ";
    cin >> m;

    
    vector<vector<double>> matrix(n, vector<double>(m));

    
    cout << "Введите элементы матрицы:\n";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> matrix[i][j];
        }
    }

    double max_of_mins = numeric_limits<double>::lowest(); 
    int max_row_index = -1;
    int max_col_index = -1;

    
    for (int i = 0; i < n; i++) {
        double min_in_row = numeric_limits<double>::max();
        int min_index = -1;

        for (int j = 0; j < m; j++) {
            if (matrix[i][j] < min_in_row) {
                min_in_row = matrix[i][j];
                min_index = j; 
            }
        }

        if (min_in_row > max_of_mins) {
            max_of_mins = min_in_row;
            max_row_index = i;
            max_col_index = min_index;
        }
    }

    cout << "Максимальный из минимальных элементов: " << max_of_mins << endl;
    cout << "Индексы элемента: (" << max_row_index << ", " << max_col_index << ")" << endl;

    return 0;
}*//




#include <iostream>
#include <vector>
using namespace std;

bool allZeros(const vector<int>& row) {
    for (int num : row) {
        if (num != 0) {
            return false;
        }
    }
    return true;
}

bool allSame(const vector<int>& row) {
    for (size_t i = 1; i < row.size(); ++i) {
        if (row[i] != row[i - 1]) {
            return false;
        }
    }
    return true;
}

bool allEven(const vector<int>& row) {
    for (int num : row) {
        if (num % 2 != 0) {
            return false;
        }
    }
    return true;
}

bool isMonotonic(const vector<int>& row) {
    bool increasing = true;
    bool decreasing = true;

    for (size_t i = 1; i < row.size(); ++i) {
        if (row[i] < row[i - 1]) {
            increasing = false;
        }
        if (row[i] > row[i - 1]) {
            decreasing = false;
        }
    }
    return increasing || decreasing;
}

int main() {
    setlocale(LC_ALL, "russian");
    int n;

    cout << "Введите порядок матрицы (n): ";
    cin >> n;

    vector<vector<int>> matrix(n, vector<int>(n));

    cout << "Введите элементы матрицы:\n";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> matrix[i][j];
        }
    }

    cout << "Номера строк, где:\n";

    cout << "a) Все элементы равны нулю: ";
    for (int i = 0; i < n; i++) {
        if (allZeros(matrix[i])) {
            cout << i + 1 << " ";
        }
    }
    cout << endl;

    cout << "b) Элементы одинаковы: ";
    for (int i = 0; i < n; i++) {
        if (allSame(matrix[i])) {
            cout << i + 1 << " ";
        }
    }
    cout << endl;

    cout << "c) Все элементы четные: ";
    for (int i = 0; i < n; i++) {
        if (allEven(matrix[i])) {
            cout << i + 1 << " ";
        }
    }
    cout << endl;

    cout << "d) Элементы образуют монотонную последовательность: ";
    for (int i = 0; i < n; i++) {
        if (isMonotonic(matrix[i])) {
            cout << i + 1 << " ";
        }
    }
    cout << endl;

    return 0;
}
