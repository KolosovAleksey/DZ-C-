#include <iostream>
using namespace std;

template<typename T>
class List {
private:
    struct Node {
        T data;
        Node* next;
        Node(T val) : data(val), next(nullptr) {}
    };
    
    Node* head = nullptr;
    size_t size = 0;

public:
    ~List() { clear(); }
    
    void push_back(T val) {
        Node** curr = &head;
        while (*curr) curr = &(*curr)->next;
        *curr = new Node(val);
        size++;
    }
    
    void push_front(T val) {
        Node* new_node = new Node(val);
        new_node->next = head;
        head = new_node;
        size++;
    }
    
    void pop_front() {
        if (!head) return;
        Node* temp = head;
        head = head->next;
        delete temp;
        size--;
    }
    
    void clear() {
        while (head) pop_front();
    }
    
    void print() const {
        for (Node* curr = head; curr; curr = curr->next)
            std::cout << curr->data << " ";
        std::cout << "\n";
    }
    
    size_t get_size() const { return size; }
    bool empty() const { return !head; }

    T& operator[](size_t idx) {
        Node* curr = head;
        for (size_t i = 0; i < idx; i++) curr = curr->next;
        return curr->data;
    }
};

int main() {
    List<int> list;
    
    list.push_back(1);
    list.push_back(2);
    list.push_front(0);
    
    cout << "List: ";
    list.print(); // 0 1 2
    
    cout << "Size: " << list.get_size() << "\n"; // 3
    
    list.pop_front();
    cout << "After pop_front: ";
    list.print(); // 1 2
    
    cout << "Element at index 1: " << list[1] << "\n"; // 2
    
    return 0;
}
