#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <cstdint>

using namespace std;

const uint16_t cp1251_to_unicode[128] = {
    0x0402, 0x0403, 0x201A, 0x0453, 0x201E, 0x2026, 0x2020, 0x2021,
    0x20AC, 0x2030, 0x0409, 0x2039, 0x040A, 0x040C, 0x040B, 0x040F,
    0x0452, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
    0x0000, 0x2122, 0x0459, 0x203A, 0x045A, 0x045C, 0x045B, 0x045F,
    0x00A0, 0x040E, 0x045E, 0x0408, 0x00A4, 0x0490, 0x00A6, 0x00A7,
    0x0401, 0x00A9, 0x0404, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x0407,
    0x00B0, 0x00B1, 0x0406, 0x0456, 0x0491, 0x00B5, 0x00B6, 0x00B7,
    0x0451, 0x2116, 0x0454, 0x00BB, 0x0458, 0x0405, 0x0455, 0x0457,
    0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417,
    0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
    0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427,
    0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
    0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437,
    0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
    0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447,
    0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F
};

vector<uint8_t> unicode_to_utf8(uint16_t unicode) {
    vector<uint8_t> utf8;
    
    if (unicode <= 0x7F) {
        utf8.push_back(static_cast<uint8_t>(unicode));
    } else if (unicode <= 0x7FF) {
        utf8.push_back(static_cast<uint8_t>(0xC0 | ((unicode >> 6) & 0x1F)));
        utf8.push_back(static_cast<uint8_t>(0x80 | (unicode & 0x3F)));
    } else {
        utf8.push_back(static_cast<uint8_t>(0xE0 | ((unicode >> 12) & 0x0F)));
        utf8.push_back(static_cast<uint8_t>(0x80 | ((unicode >> 6) & 0x3F)));
        utf8.push_back(static_cast<uint8_t>(0x80 | (unicode & 0x3F)));
    }
    
    return utf8;
}

uint16_t utf8_to_unicode(const vector<uint8_t>& utf8, size_t& pos) {
    uint16_t unicode = 0;
    
    if ((utf8[pos] & 0x80) == 0) {
        unicode = utf8[pos];
    } else if ((utf8[pos] & 0xE0) == 0xC0) {
        unicode = ((utf8[pos] & 0x1F) << 6) | (utf8[pos+1] & 0x3F);
        pos += 1;
    } else if ((utf8[pos] & 0xF0) == 0xE0) {
        unicode = ((utf8[pos] & 0x0F) << 12) | ((utf8[pos+1] & 0x3F) << 6) | (utf8[pos+2] & 0x3F);
        pos += 2;
    }
    
    return unicode;
}

uint8_t unicode_to_cp1251(uint16_t unicode) {
    if (unicode <= 0x7F) {
        return static_cast<uint8_t>(unicode);
    }

    for (int i = 0; i < 128; ++i) {
        if (cp1251_to_unicode[i] == unicode) {
            return static_cast<uint8_t>(i + 0x80);
        }
    }
    
    return '?';
}

vector<uint8_t> read_file(const string& filename) {
    ifstream file(filename, ios::binary);
    if (!file) {
        throw runtime_error("Cannot open input file");
    }
    
    file.seekg(0, ios::end);
    size_t size = file.tellg();
    file.seekg(0, ios::beg);
    
    vector<uint8_t> data(size);
    file.read(reinterpret_cast<char*>(data.data()), size);
    
    return data;
}

void write_file(const string& filename, const vector<uint8_t>& data) {
    ofstream file(filename, ios::binary);
    if (!file) {
        throw runtime_error("Cannot open output file");
    }
    
    file.write(reinterpret_cast<const char*>(data.data()), data.size());
}

vector<uint8_t> cp1251_to_utf8(const vector<uint8_t>& cp1251_data) {
    vector<uint8_t> utf8_data;
    
    for (uint8_t byte : cp1251_data) {
        if (byte <= 0x7F) {
            utf8_data.push_back(byte);
        } else {
            uint16_t unicode = cp1251_to_unicode[byte - 0x80];
            vector<uint8_t> utf8 = unicode_to_utf8(unicode);
            utf8_data.insert(utf8_data.end(), utf8.begin(), utf8.end());
        }
    }
    
    return utf8_data;
}

vector<uint8_t> utf8_to_cp1251(const vector<uint8_t>& utf8_data) {
    vector<uint8_t> cp1251_data;
    
    for (size_t i = 0; i < utf8_data.size(); ++i) {
        if ((utf8_data[i] & 0x80) == 0) {
            cp1251_data.push_back(utf8_data[i]);
        } else {
            uint16_t unicode = utf8_to_unicode(utf8_data, i);
            uint8_t cp1251 = unicode_to_cp1251(unicode);
            cp1251_data.push_back(cp1251);
        }
    }
    
    return cp1251_data;
}

int main() {
    try {
        string input_filename, output_filename;
        int input_encoding, output_encoding;
        
        cout << "Enter input filename: ";
        cin >> input_filename;
        
        cout << "Enter output filename: ";
        cin >> output_filename;
        
        cout << "Select input encoding (1 - CP1251, 2 - UTF-8): ";
        cin >> input_encoding;
        
        cout << "Select output encoding (1 - CP1251, 2 - UTF-8): ";
        cin >> output_encoding;
        
        if (input_encoding < 1 || input_encoding > 2 || output_encoding < 1 || output_encoding > 2) {
            cerr << "Invalid encoding selection" << endl;
            return 1;
        }
        
        vector<uint8_t> input_data = read_file(input_filename);
        vector<uint8_t> output_data;
        
        if (input_encoding == 1 && output_encoding == 2) {
            output_data = cp1251_to_utf8(input_data);
        } else if (input_encoding == 2 && output_encoding == 1) {
            output_data = utf8_to_cp1251(input_data);
        } else {
            output_data = input_data;
        }
        
        write_file(output_filename, output_data);
        
        cout << "File converted successfully!" << endl;
    } catch (const exception& e) {
        cerr << "Error: " << e.what() << endl;
        return 1;
    }
    
    return 0;
}
