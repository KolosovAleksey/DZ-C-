#include <iostream>
#include <string>
using namespace std;

class Employee {
protected:
    string name;
    double salary;

public:
    Employee(const string& name, double salary)
        : name(name), salary(salary) {}

    virtual double calculateBonus() const {
        return 0.0;
    }

    virtual ~Employee() = default;
};

class Manager : public Employee {
private:
    int numberOfSubordinates;

public:
    Manager(const string& name, double salary, int numberOfSubordinates)
        : Employee(name, salary), numberOfSubordinates(numberOfSubordinates) {}

    double calculateBonus() const override {
        return salary * 0.1 + numberOfSubordinates * 100;
    }
};

class Developer : public Employee {
private:
    int numberOfProjects;

public:
    Developer(const string& name, double salary, int numberOfProjects)
        : Employee(name, salary), numberOfProjects(numberOfProjects) {}

    double calculateBonus() const override {
        return salary * 0.15 + numberOfProjects * 200;
    }
};

class Intern : public Employee {
private:
    int internshipDuration;

public:
    Intern(const std::string& name, double salary, int internshipDuration)
        : Employee(name, salary), internshipDuration(internshipDuration) {}

    double calculateBonus() const override {
        if (internshipDuration > 3) {
            return 500;
        }
        else {
            return 0.0;
        }
    }
};

void printEmployeeBonus(const Employee& employee) {
    cout << "Employee: " << employee.calculateBonus() << " bonus." << endl;
}

int main() {
    setlocale(LC_ALL, "russian");
    Manager manager("Ilon Mask", 5000, 5);
    Developer developer("Donald Trump", 4000, 3);
    Intern intern("Bill Harrington", 1000, 4);

    printEmployeeBonus(manager);
    printEmployeeBonus(developer);
    printEmployeeBonus(intern);

    return 0;
}
