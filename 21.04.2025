using System;

namespace FoodAndDrinkFactory
{
    public interface IFood
    {
        string Eat();
    }

    public interface IDrink
    {
        string Drink();
    }

    public class Pizza : IFood
    {
        public string Eat()
        {
            return "we havaete pizza.";
        }
    }

    public class Sushi : IFood
    {
        public string Eat()
        {
            return "we havaete sushi.";
        }
    }

    public class Cola : IDrink
    {
        public string Drink()
        {
            return "We drinkaete gazirovky.";
        }
    }

    public class Juice : IDrink
    {
        public string Drink()
        {
            return "we havaete juice.";
        }
    }

    public abstract class FoodFactory
    {
        public abstract IFood CreateFood();
        public abstract IDrink CreateDrink();
    }

    public class ItalianFactory : FoodFactory
    {
        public override IFood CreateFood()
        {
            return new Pizza();
        }

        public override IDrink CreateDrink()
        {
            return new Cola();
        }
    }

    public class JapaneseFactory : FoodFactory
    {
        public override IFood CreateFood()
        {
            return new Sushi();
        }

        public override IDrink CreateDrink()
        {
            return new Juice();
        }
    }

    class Program
    {
        static void ClientCode(FoodFactory factory)
        {
            IFood food = factory.CreateFood();
            IDrink drink = factory.CreateDrink();

            Console.WriteLine(food.Eat());
            Console.WriteLine(drink.Drink());
        }

        static void Main(string[] args)
        {
            Console.WriteLine("italian kitchen:");
            FoodFactory italianFactory = new ItalianFactory();
            ClientCode(italianFactory);

            Console.WriteLine("\n Japanise kitchen:");
            FoodFactory japaneseFactory = new JapaneseFactory();
            ClientCode(japaneseFactory);
        }
    }
}
