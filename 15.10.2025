#include <iostream>
#include <vector>
#include <stack>
#include <list>

using namespace std;

class Graph {
    int V;
    list<int>* adj;

public:
    Graph(int V);
    void addEdge(int v, int w);
    void DFS(int s);
    void DFSRecursive(int s);
    void DFSUtil(int v, vector<bool>& visited);
};

Graph::Graph(int V) {
    this->V = V;
    adj = new list<int>[V];
}

void Graph::addEdge(int v, int w) {
    adj[v].push_back(w);
}

void Graph::DFS(int s) {
    vector<bool> visited(V, false);
    stack<int> stack;

    stack.push(s);

    while (!stack.empty()) {
        s = stack.top();
        stack.pop();

        if (!visited[s]) {
            cout << s << " ";
            visited[s] = true;
        }

        for (auto i = adj[s].rbegin(); i != adj[s].rend(); ++i) {
            if (!visited[*i]) {
                stack.push(*i);
            }
        }
    }
}

void Graph::DFSUtil(int v, vector<bool>& visited) {
    visited[v] = true;
    cout << v << " ";

    for (auto i = adj[v].begin(); i != adj[v].end(); ++i) {
        if (!visited[*i]) {
            DFSUtil(*i, visited);
        }
    }
}

void Graph::DFSRecursive(int s) {
    vector<bool> visited(V, false);
    DFSUtil(s, visited);
}

int main() {
    setlocale(LC_ALL,"russian");
    Graph g(6);
    
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 4);
    g.addEdge(3, 4);
    g.addEdge(3, 5);
    g.addEdge(4, 5);

    cout << "Итеративный DFS (начиная с вершины 0): ";
    g.DFS(0);
    cout << endl;

    cout << "Рекурсивный DFS (начиная с вершины 0): ";
    g.DFSRecursive(0);
    cout << endl;

    return 0;
}
