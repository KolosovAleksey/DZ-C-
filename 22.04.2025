using System;
using System.Collections.Generic;

public interface IDatabaseObserver
{
    void Update(string operation, string tableName, object record);
}

public class Administrator : IDatabaseObserver
{
    public string Name { get; }

    public Administrator(string name)
    {
        Name = name;
    }

    public void Update(string operation, string tableName, object record)
    {
        Console.WriteLine($"Администратор {Name} получил уведомление: " +
                          $"Операция '{operation}' выполнена с таблицей '{tableName}'. " +
                          $"Запись: {record}");
    }
}

public sealed class Database : IDisposable
{
    private static Database _instance;
    private static readonly object _lock = new object();

    private readonly List<IDatabaseObserver> _observers = new List<IDatabaseObserver>();

    private Database()
    {
        Console.WriteLine("База данных инициализирована");
    }

    public static Database GetInstance()
    {
        if (_instance == null)
        {
            lock (_lock)
            {
                if (_instance == null)
                {
                    _instance = new Database();
                }
            }
        }
        return _instance;
    }

    public void Attach(IDatabaseObserver observer)
    {
        _observers.Add(observer);
        Console.WriteLine($"Добавлен наблюдатель: {observer.GetType().Name}");
    }

    public void Detach(IDatabaseObserver observer)
    {
        _observers.Remove(observer);
        Console.WriteLine($"Удален наблюдатель: {observer.GetType().Name}");
    }

    private void Notify(string operation, string tableName, object record)
    {
        foreach (var observer in _observers)
        {
            observer.Update(operation, tableName, record);
        }
    }

    public void Insert(string tableName, object record)
    {
        Console.WriteLine($"Вставка записи в таблицу {tableName}: {record}");
        Notify("INSERT", tableName, record);
    }

    public void Update(string tableName, object record)
    {
        Console.WriteLine($"Обновление записи в таблице {tableName}: {record}");
        Notify("UPDATE", tableName, record);
    }

    public void Delete(string tableName, object record)
    {
        Console.WriteLine($"Удаление записи из таблицы {tableName}: {record}");
        Notify("DELETE", tableName, record);
    }

    public void Dispose()
    {
        _observers.Clear();
        Console.WriteLine("База данных закрыта");
    }
}

class Program
{
    static void Main(string[] args)
    {
        var db = Database.GetInstance();

        var admin1 = new Administrator("Иван Петров");
        var admin2 = new Administrator("Анна Сидорова");

        db.Attach(admin1);
        db.Attach(admin2);

        db.Insert("Users", new { Id = 1, Name = "John Doe", Email = "john@example.com" });
        db.Update("Products", new { Id = 42, Name = "Laptop", Price = 999.99 });

        db.Detach(admin2);

        db.Delete("Orders", new { Id = 101, CustomerId = 1, Amount = 149.99 });

        var db2 = Database.GetInstance();
        Console.WriteLine($"Один и тот же экземпляр базы данных? {db == db2}");

        db.Dispose();
    }
}
